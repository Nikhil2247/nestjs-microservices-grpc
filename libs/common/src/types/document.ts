// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.1
// source: proto/document.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "documents";

export interface UploadDocumentRequest {
  caseId: string;
  filename: string;
  fileUrl: string;
}

export interface Empty {
}

export interface GetDocumentRequest {
  id: string;
}

export interface DeleteDoucment {
  id: string;
}

export interface DeleteResponse {
  success: boolean;
}

export interface DocumentResponse {
  id: string;
  caseId: string;
  filename: string;
  fileUrl: string;
  uploadedAt: string;
}

export interface ListDocumentsResponse {
  documents: DocumentResponse[];
}

export const DOCUMENTS_PACKAGE_NAME = "documents";

export interface DocumentServiceClient {
  uploadDocument(request: UploadDocumentRequest): Observable<DocumentResponse>;

  getDocument(request: GetDocumentRequest): Observable<DocumentResponse>;

  listDocuments(request: Empty): Observable<ListDocumentsResponse>;

  deleteDocument(request: DeleteDoucment): Observable<DeleteResponse>;
}

export interface DocumentServiceController {
  uploadDocument(
    request: UploadDocumentRequest,
  ): Promise<DocumentResponse> | Observable<DocumentResponse> | DocumentResponse;

  getDocument(request: GetDocumentRequest): Promise<DocumentResponse> | Observable<DocumentResponse> | DocumentResponse;

  listDocuments(
    request: Empty,
  ): Promise<ListDocumentsResponse> | Observable<ListDocumentsResponse> | ListDocumentsResponse;

  deleteDocument(request: DeleteDoucment): Promise<DeleteResponse> | Observable<DeleteResponse> | DeleteResponse;
}

export function DocumentServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["uploadDocument", "getDocument", "listDocuments", "deleteDocument"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("DocumentService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("DocumentService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DOCUMENT_SERVICE_NAME = "DocumentService";
