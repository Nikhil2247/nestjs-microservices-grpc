// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.1
// source: proto/cases.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "cases";

export interface Case {
  id: string;
  userId: string;
  title: string;
  description: string;
  status: string;
  createdAt: string;
  updatedAt: string;
}

export interface CreateCaseRequest {
  userId: string;
  title: string;
  description: string;
  status: string;
}

export interface GetCaseRequest {
  id: string;
}

export interface UpdateCaseRequest {
  id: string;
  title: string;
  description: string;
  status: string;
}

export interface DeleteCaseRequest {
  id: string;
}

export interface GetCasesByUserIdRequest {
  userId: string;
}

export interface CaseResponse {
  cases: Case;
}

export interface CasesListResponse {
  cases: Case[];
}

export interface DeleteResponse {
  success: boolean;
}

export const CASES_PACKAGE_NAME = "cases";

export interface CasesServiceClient {
  createCase(request: CreateCaseRequest): Observable<CaseResponse>;

  getCase(request: GetCaseRequest): Observable<CaseResponse>;

  updateCase(request: UpdateCaseRequest): Observable<CaseResponse>;

  deleteCase(request: DeleteCaseRequest): Observable<DeleteResponse>;

  getCasesByUserId(request: GetCasesByUserIdRequest): Observable<CasesListResponse>;
}

export interface CasesServiceController {
  createCase(request: CreateCaseRequest): Promise<CaseResponse> | Observable<CaseResponse> | CaseResponse;

  getCase(request: GetCaseRequest): Promise<CaseResponse> | Observable<CaseResponse> | CaseResponse;

  updateCase(request: UpdateCaseRequest): Promise<CaseResponse> | Observable<CaseResponse> | CaseResponse;

  deleteCase(request: DeleteCaseRequest): Promise<DeleteResponse> | Observable<DeleteResponse> | DeleteResponse;

  getCasesByUserId(
    request: GetCasesByUserIdRequest,
  ): Promise<CasesListResponse> | Observable<CasesListResponse> | CasesListResponse;
}

export function CasesServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createCase", "getCase", "updateCase", "deleteCase", "getCasesByUserId"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CasesService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CasesService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CASES_SERVICE_NAME = "CasesService";
