// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.1
// source: proto/event.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "events";

export interface CreateEventRequest {
  title: string;
  description: string;
  caseId: string;
  startTime: string;
  endTime: string;
}

export interface DeleteResponse {
  success: boolean;
}

export interface DeleteEventRequest {
  id: string;
}

export interface Empty {
}

export interface UpdateEventRequest {
  id: string;
  title: string;
  description: string;
  startTime: string;
  endTime: string;
}

export interface EventResponse {
  id: string;
  title: string;
  description: string;
  caseId: string;
  startTime: string;
  endTime: string;
  createdAt: string;
  updatedAt: string;
}

export interface ListEventsRequest {
  caseId: string;
}

export interface ListEventsResponse {
  events: EventResponse[];
}

export const EVENTS_PACKAGE_NAME = "events";

export interface EventServiceClient {
  createEvent(request: CreateEventRequest): Observable<EventResponse>;

  getEvent(request: Empty): Observable<EventResponse>;

  listEvents(request: ListEventsRequest): Observable<ListEventsResponse>;

  updateEvent(request: UpdateEventRequest): Observable<EventResponse>;

  deleteEvent(request: DeleteEventRequest): Observable<DeleteResponse>;
}

export interface EventServiceController {
  createEvent(request: CreateEventRequest): Promise<EventResponse> | Observable<EventResponse> | EventResponse;

  getEvent(request: Empty): Promise<EventResponse> | Observable<EventResponse> | EventResponse;

  listEvents(
    request: ListEventsRequest,
  ): Promise<ListEventsResponse> | Observable<ListEventsResponse> | ListEventsResponse;

  updateEvent(request: UpdateEventRequest): Promise<EventResponse> | Observable<EventResponse> | EventResponse;

  deleteEvent(request: DeleteEventRequest): Promise<DeleteResponse> | Observable<DeleteResponse> | DeleteResponse;
}

export function EventServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createEvent", "getEvent", "listEvents", "updateEvent", "deleteEvent"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("EventService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("EventService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const EVENT_SERVICE_NAME = "EventService";
